apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.28.0 (c4137012e)
  creationTimestamp: null
  labels:
    io.kompose.service: postgres
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: postgres
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert
        kompose.version: 1.28.0 (c4137012e)
      creationTimestamp: null
      labels:
        io.kompose.network/integrating-circleci-on-noted-webapp-noted-network: "true"
        io.kompose.service: postgres
    spec:
      containers:
        - env:
            - name: ADMIN_EMAIL
              valueFrom:
                configMapKeyRef:
                  key: ADMIN_EMAIL
                  name: env
            - name: ADMIN_NAME
              valueFrom:
                configMapKeyRef:
                  key: ADMIN_NAME
                  name: env
            - name: DATABASE_HOST
              valueFrom:
                configMapKeyRef:
                  key: DATABASE_HOST
                  name: env
            - name: DATABASE_NAME
              valueFrom:
                configMapKeyRef:
                  key: DATABASE_NAME
                  name: env
            - name: DATABASE_PASSWORD
              valueFrom:
                configMapKeyRef:
                  key: DATABASE_PASSWORD
                  name: env
            - name: DATABASE_PORT
              valueFrom:
                configMapKeyRef:
                  key: DATABASE_PORT
                  name: env
            - name: DATABASE_USER
              valueFrom:
                configMapKeyRef:
                  key: DATABASE_USER
                  name: env
            - name: IP
              valueFrom:
                configMapKeyRef:
                  key: IP
                  name: env
            - name: POSTGRES_DB
              value: ${DATABASE_NAME}
            - name: POSTGRES_PASSWORD
              value: ${DATABASE_PASSWORD}
            - name: POSTGRES_USER
              value: ${DATABASE_USER}
            - name: REDIS_LOCATION
              valueFrom:
                configMapKeyRef:
                  key: REDIS_LOCATION
                  name: env
            - name: SECRET_KEY
              valueFrom:
                configMapKeyRef:
                  key: SECRET_KEY
                  name: env
          image: postgres:13
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -q
                - -d
                - ${DATABASE_NAME}
                - -U
                - ${DATABASE_USER}
            failureThreshold: 3
            timeoutSeconds: 5
          name: postgres
          ports:
            - containerPort: 5432
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: db
      restartPolicy: Always
      volumes:
        - name: db
          persistentVolumeClaim:
            claimName: db
status: {}
